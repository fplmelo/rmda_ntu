---
title: "Week 1 - Sorting out"
subtitle: "Week 1"
description: ""
title-block-banner: "#9e043d"
toc: true
navbar:
  - text: Pre-ssesion
    href: index.qmd
  - text: Post-ssesion
    href: index.qmd
---

![](/img/intro_fig.png)

# Pre-session

## Getting started with R and RStudio

**Why R is a valuable tool?** for your studies and how to begin using it effectively, particularly with the RStudio IDE.

### Why R?

R was developed by statisticians as an **interactive environment for data analysis**, unlike programming languages like C or Java. This interactivity is crucial for the quick exploration of data, a necessity in data science. Although interactive, your work can be saved as **reproducible scripts**. While expert programmers may find its conventions different, R offers significant power in data analysis and data visualization.

Other attractive features of R include:

*   It is **free and open source**.
*   It runs on all major platforms: Windows, Mac OS, UNIX/Linux.
*   Scripts and data objects can be shared seamlessly across platforms.
*   It has a **large, growing, and active community** providing numerous learning resources.
*   It is easy for others to contribute add-ons (packages), giving users access to the latest methodologies and tools for various disciplines.

R's **primary design purpose** was to serve as an **interactive environment for data analysis**, having been developed by statisticians rather than software engineers for software development. This interactivity is highlighted as an **indispensable feature in data science** because it allows for the **ability to quickly explore data**, which is crucial for success in the field.

A **key benefit** of R, stemming directly from its design, is this **interactivity**, which enables data scientists to rapidly examine and understand their data. Furthermore, the ability to save interactive work as **scripts that can be easily executed** at any time provides a record of the analysis, making work **reproducible**. Beyond interactivity and reproducibility, the text also notes the **"unequal power of R when it comes to data analysis and, specifically, data visualization"** as a significant benefit that users will come to appreciate with patience.

### The R Console

Interactive data analysis usually takes place in the **R console**, which executes commands as you type them. You can access it by starting R on your computer. The chapter provides an example of calculating a tip using the console and explains the book's convention of using grey boxes for R code and `#> ` to denote console output.

### Scripts

A major advantage of R is the ability to **save your work as scripts**, which can be edited and saved using a text editor. The material in the book was developed using the **RStudio integrated development environment (IDE)**. RStudio offers an editor with R-specific features, a console, and other useful panes, including one for displaying figures. While some web-based R consoles offer script editing, not all allow saving. The R scripts used to generate the book are available on GitHub.

### RStudio

RStudio is presented as the primary tool for data science projects. It provides an editor for creating and editing scripts and other useful tools.

#### The panes

When you first open RStudio, you typically see three panes:
*   The **left pane** is the R console.
*   On the **right**, the **top pane** includes tabs like *Environment* and *History*.
*   The **bottom pane** shows tabs such as *Files*, *Plots*, *Packages*, *Help*, and *Viewer*.

#### Key bindings

RStudio allows you to use **key bindings** (keyboard shortcuts) for many tasks instead of using the mouse. It is recommended to memorise key bindings for frequently used operations. [RStudio provides a cheat sheet with common commands](https://ucdavis-bioinformatics-training.github.io/Oct2017-ILRI-Workshop/Cheat_Sheets/rstudio-IDE-cheatsheet.pdf).

#### Running commands while editing scripts

RStudio is specifically designed for R and offers advantages over other editors, such as the ability to **easily test code as you edit scripts**. To start a new script, you can go to *File* > *New File* > *R Script* or use the key binding Ctrl+Shift+N (Windows) or command+shift+N (Mac). The chapter explains how to save a script (Ctrl+S or command+S) and recommends using a descriptive name with lowercase letters, hyphens, and the `.R` suffix (e.g., `my-first-script.R`).

RStudio offers features like **auto-completion** when typing code, such as the `library()` function. To execute code from the script, you can click the **Run button** or use the key binding Ctrl+Shift+Enter (Windows) or command+shift+return (Mac), which will show the output in the R console and plots in the plots pane. You can also run **one line at a time** using Control-Enter (Windows) or command-return (Mac). The plots console allows you to navigate between plots, zoom, and save them.

#### Changing global options

RStudio's look and functionality can be customised via *Tools* > *Global Optionsâ€¦*. The chapter **highly recommends** changing the default setting for **"Save workspace to .RData on exit" to "Never"** and unchecking **"Restore .RData into workspace at start"**. This is advised to prevent confusion, especially when sharing code, as it avoids the assumption that colleagues have the `.RData` file.

### Installing R packages

The functionality of a fresh R installation (referred to as **base R**) is limited. Additional functionality comes from **packages**, which are add-ons contributed by developers and available from repositories like CRAN and GitHub. To install a package, such as `tydiverse`, you can use the `install.packages()` function in the R console:

```R
install.packages ( "tydiverse" )
```

Alternatively, you can use the *Tools* > *Install Packages* option in RStudio. Once installed, a package can be loaded into your R session using the `library()` function:

```R
library (tydiverse)
```

You only need to install a package once unless you install a fresh version of R. You can install multiple packages at once by providing a character vector to `install.packages()`:

```R
install.packages ( c ( "tidyverse" ,  "vegan" ))
```

Installing some packages, like `tidyverse`, may also install other **dependency** packages. When you load a package with `library()`, its dependencies are also loaded. It is useful to keep a list of needed packages in a script for easy re-installation if required. You can see all installed packages using the `installed.packages()` function. Importantly, packages are installed in R, not RStudio.

# Session

## Slides

{{< revealjs file="https://fplmelo.github.io/rmda_ntu/slides/01_intro_rmda.html#/title-slide" height="500px" class="ratio ratio-16x9" >}}

# Post-session

## Create your workbook

## Introduction

Quarto is a powerful tool for creating dynamic documents and websites. This tutorial will guide you through the process of creating a simple webpage using Quarto.

## Prerequisites

Before you begin, make sure you have the following installed:

* **Quarto:** You can download and install Quarto from [quarto.org](https://quarto.org/docs/get-started/).
* **Rstudio:** However, any text editor will work, such as VS Code, Sublime Text, or Notepad++.

### Step 1: Create a New Quarto Document

1.  Open your terminal or command prompt.
2.  Navigate to the directory where you want to create your webpage.
3.  Run the following command to create a new Quarto document:

    ```bash
    quarto create webpage.qmd
    ```

    This command creates a file named `webpage.qmd`.

### Step 2: Edit the Quarto Document

1.  Open `webpage.qmd` in your text editor.
2.  You'll see some default content, including a title and some example text.
3.  Modify the content to create your webpage. For example:

    ```qmd
    ---
    title: "My First Quarto Webpage"
    format: html
    ---

    ## Welcome!

    This is my first webpage created with Quarto.

    Here's a simple list:

    * Item 1
    * Item 2
    * Item 3

    You can also include code blocks:

    ```{r}
    print("Hello, Quarto!")
    ```

    And mathematical equations:

    $$
    E = mc^2
    $$

    You can add images too:

    ```{r}
    knitr::include_graphics("https://quarto.org/quarto.png")
    ```
    ```

    **Explanation of the code:**

    * `--- title: "My First Quarto Webpage" format: html ---` : This is the YAML header, which sets the title of your webpage and specifies the output format (HTML in this case).
    * `## Welcome!` : This is a level 2 heading.
    * `* Item 1` : This creates a bulleted list.
    * ````{r}`: This begins a R code block.
    * `$$E = mc^2$$`: This inserts a LaTeX equation.
    * ````{r}`: This begins an R code block.
    * `knitr::include_graphics("https://quarto.org/quarto.png")`: This includes an image from a URL.

### Step 3: Render the Webpage

1.  In your terminal or command prompt, navigate to the directory containing `webpage.qmd`.
2.  Run the following command to render the webpage:

    ```bash
    quarto render webpage.qmd
    ```

    This command will create an HTML file named `webpage.html` in the same directory.

### Step 4: View the Webpage

1.  Open `webpage.html` in your web browser.
2.  You should see your webpage with the content you created.

## Adding more content

You can add more content to your webpage by editing `webpage.qmd`. Quarto supports various types of content, including:

* **Headings:** Use `#`, `##`, `###`, etc. for different heading levels.
* **Paragraphs:** Just type your text.
* **Lists:** Use `*` or `-` for unordered lists, and `1.`, `2.`, etc. for ordered lists.
* **Code Blocks:** Use ````{language}` to insert code blocks.
* **Mathematical Equations:** Use `$$` for LaTeX equations.
* **Images:** Use `![alt text](path/to/image.png)` or ````{r} knitr::include_graphics("path/to/image.png") ````.
* **Links:** Use `[link text](url)`.
* **Tables:** Use Markdown table syntax.

## Further Exploration

* Explore the Quarto documentation for more advanced features: [quarto.org](https://quarto.org/).
* Experiment with different output formats, such as PDF or Word.
* Learn about Quarto projects for creating multi-page websites.
* Look into adding CSS and Javascript for styling and interactivity.

## Publishing to Quarto Pub

Know how to publish your Quarto webpage to Quarto Pub, making it accessible online.

## Prerequisites

* All the prerequisites from the previous tutorial.
* A Quarto Pub account. You can create one at [quarto.pub](https://quarto.pub/).

### Step 1: Create a Quarto Webpage (If you haven't already)

If you haven't already created a Quarto webpage, follow the steps in the previous tutorial to create `webpage.qmd` and render it into `webpage.html`.

### Step 2: Initialize Quarto Pub

1.  Open your terminal or command prompt.
2.  Navigate to the directory containing `webpage.qmd`.
3.  Run the following command to initialize Quarto Pub:

    ```bash
    quarto publish quarto-pub
    ```

    This command will prompt you to log in to your Quarto Pub account. Follow the instructions to authenticate.

### Step 3: Publish Your Webpage

1.  After successful authentication, Quarto will detect the `webpage.html` file and ask you if you want to publish it.
2.  Confirm that you want to publish the webpage.
3.  Quarto will upload your webpage to Quarto Pub.
4.  You'll receive a URL where your webpage is hosted.

### Step 4: View Your Published Webpage

1.  Open the URL provided by Quarto in your web browser.
2.  You should see your webpage hosted on Quarto Pub.

### Step 5: Updating your published page.

If you edit the `webpage.qmd` file, you will need to re-render the html file, and then republish.

1.  Edit `webpage.qmd` with your text editor.
2.  Render the html file again.

    ```bash
    quarto render webpage.qmd
    ```

3.  Republish the webpage.

    ```bash
    quarto publish quarto-pub
    ```

    Quarto Pub will update the existing webpage with the new content.

## Important Considerations

* **File Organization:** For more complex websites, consider creating a Quarto project. This will help you organize your files and manage your website more effectively.
* **Custom Domains:** Quarto Pub allows you to use custom domains for your websites. Refer to the Quarto Pub documentation for instructions.
* **Security:** Be mindful of the content you publish online. Avoid sharing sensitive information.
* **Quarto Pub Limitations:** Quarto Pub has some limitations, especially for large or complex websites. For more advanced hosting options, consider using other platforms like Netlify or GitHub Pages.
* **Free tier limitations:** The free tier of Quarto Pub has some limitations, regarding the number of deployments, and storage. Refer to the Quarto Pub documentation for the most up to date limitations.

## Further Exploration

* Explore the Quarto Pub documentation for more advanced features: [quarto.pub](https://quarto.pub/docs/).
* Learn about Quarto projects for creating multi-page websites.
* Experiment with different Quarto Pub settings and options.

## Exercise

Now create your own quarto workbook:

1 - Download the [zip file of the project](exercises/week1-exercise.zip)

2- Tweak the `*qmd file` as you wish

3 - Publish your workbook

4 - Submit to the link to [NOW dropbox folder]()