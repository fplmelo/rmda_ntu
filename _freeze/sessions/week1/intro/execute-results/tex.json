{
  "hash": "fc2d46ae8115ce092c5a3b1df841a882",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 1 - Sorting out\"\nauthor: \"Felipe Melo\"\ndate: \"04-06-2025\"\ndate-format: \"long\"\nformat:\n  html:\n    toc: true\n  pdf:\n    toc: true\n\n---\n\n\n\n\n\n\n![](/img/intro_fig.png)\n\n# Pre-session\n\n## Getting started with R and RStudio\n\n**Why R is a valuable tool?** for your studies and how to begin using it effectively, particularly with the RStudio IDE.\n\n### Why R?\n\nR was developed by statisticians as an **interactive environment for data analysis**, unlike programming languages like C or Java. This interactivity is crucial for the quick exploration of data, a necessity in data science. Although interactive, your work can be saved as **reproducible scripts**. While expert programmers may find its conventions different, R offers significant power in data analysis and data visualization.\n\nOther attractive features of R include:\n\n*   It is **free and open source**.\n*   It runs on all major platforms: Windows, Mac OS, UNIX/Linux.\n*   Scripts and data objects can be shared seamlessly across platforms.\n*   It has a **large, growing, and active community** providing numerous learning resources.\n*   It is easy for others to contribute add-ons (packages), giving users access to the latest methodologies and tools for various disciplines.\n\nR's **primary design purpose** was to serve as an **interactive environment for data analysis**, having been developed by statisticians rather than software engineers for software development. This interactivity is highlighted as an **indispensable feature in data science** because it allows for the **ability to quickly explore data**, which is crucial for success in the field.\n\nA **key benefit** of R, stemming directly from its design, is this **interactivity**, which enables data scientists to rapidly examine and understand their data. Furthermore, the ability to save interactive work as **scripts that can be easily executed** at any time provides a record of the analysis, making work **reproducible**. Beyond interactivity and reproducibility, the text also notes the **\"unequal power of R when it comes to data analysis and, specifically, data visualization\"** as a significant benefit that users will come to appreciate with patience.\n\n### The R Console\n\nInteractive data analysis usually takes place in the **R console**, which executes commands as you type them. You can access it by starting R on your computer. The chapter provides an example of calculating a tip using the console and explains the book's convention of using grey boxes for R code and `#> ` to denote console output.\n\n### Scripts\n\nA major advantage of R is the ability to **save your work as scripts**, which can be edited and saved using a text editor. The material in the book was developed using the **RStudio integrated development environment (IDE)**. RStudio offers an editor with R-specific features, a console, and other useful panes, including one for displaying figures. While some web-based R consoles offer script editing, not all allow saving. The R scripts used to generate the book are available on GitHub.\n\n### RStudio\n\nRStudio is presented as the primary tool for data science projects. It provides an editor for creating and editing scripts and other useful tools.\n\n#### The panes\n\nWhen you first open RStudio, you typically see three panes:\n*   The **left pane** is the R console.\n*   On the **right**, the **top pane** includes tabs like *Environment* and *History*.\n*   The **bottom pane** shows tabs such as *Files*, *Plots*, *Packages*, *Help*, and *Viewer*.\n\n#### Key bindings\n\nRStudio allows you to use **key bindings** (keyboard shortcuts) for many tasks instead of using the mouse. It is recommended to memorise key bindings for frequently used operations. [RStudio provides a cheat sheet with common commands](https://ucdavis-bioinformatics-training.github.io/Oct2017-ILRI-Workshop/Cheat_Sheets/rstudio-IDE-cheatsheet.pdf).\n\n#### Running commands while editing scripts\n\nRStudio is specifically designed for R and offers advantages over other editors, such as the ability to **easily test code as you edit scripts**. To start a new script, you can go to *File* > *New File* > *R Script* or use the key binding Ctrl+Shift+N (Windows) or command+shift+N (Mac). The chapter explains how to save a script (Ctrl+S or command+S) and recommends using a descriptive name with lowercase letters, hyphens, and the `.R` suffix (e.g., `my-first-script.R`).\n\nRStudio offers features like **auto-completion** when typing code, such as the `library()` function. To execute code from the script, you can click the **Run button** or use the key binding Ctrl+Shift+Enter (Windows) or command+shift+return (Mac), which will show the output in the R console and plots in the plots pane. You can also run **one line at a time** using Control-Enter (Windows) or command-return (Mac). The plots console allows you to navigate between plots, zoom, and save them.\n\n#### Changing global options\n\nRStudio's look and functionality can be customised via *Tools* > *Global Optionsâ€¦*. The chapter **highly recommends** changing the default setting for **\"Save workspace to .RData on exit\" to \"Never\"** and unchecking **\"Restore .RData into workspace at start\"**. This is advised to prevent confusion, especially when sharing code, as it avoids the assumption that colleagues have the `.RData` file.\n\n### Installing R packages\n\nThe functionality of a fresh R installation (referred to as **base R**) is limited. Additional functionality comes from **packages**, which are add-ons contributed by developers and available from repositories like CRAN and GitHub. To install a package, such as `tydiverse`, you can use the `install.packages()` function in the R console:\n\n```R\ninstall.packages ( \"tydiverse\" )\n```\n\nAlternatively, you can use the *Tools* > *Install Packages* option in RStudio. Once installed, a package can be loaded into your R session using the `library()` function:\n\n```R\nlibrary (tydiverse)\n```\n\nYou only need to install a package once unless you install a fresh version of R. You can install multiple packages at once by providing a character vector to `install.packages()`:\n\n```R\ninstall.packages ( c ( \"tidyverse\" ,  \"vegan\" ))\n```\n\nInstalling some packages, like `tidyverse`, may also install other **dependency** packages. When you load a package with `library()`, its dependencies are also loaded. It is useful to keep a list of needed packages in a script for easy re-installation if required. You can see all installed packages using the `installed.packages()` function. Importantly, packages are installed in R, not RStudio.\n\n# Session\n\n## Slides\n\n\n\n\n\n\n{{< revealjs file=\"https://fplmelo.github.io/rmda_ntu/slides/01_intro_rmda.html#/title-slide\" height=\"500px\" class=\"ratio ratio-16x9\" >}}\n\n\n\n\n\n\n\n\n\n\n# Post-session\n\n## Create your workbook\n\n## Introduction\n\nQuarto is a powerful tool for creating dynamic documents and websites. This tutorial will guide you through the process of creating a simple webpage using Quarto.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following installed:\n\n* **Quarto:** You can download and install Quarto from [quarto.org](https://quarto.org/docs/get-started/).\n* **Rstudio:** However, any text editor will work, such as VS Code, Sublime Text, or Notepad++.\n\n### Step 1: Create a New Quarto Document\n\n1.  Open your terminal or command prompt.\n2.  Navigate to the directory where you want to create your webpage.\n3.  Run the following command to create a new Quarto document:\n\n    ```bash\n    quarto create webpage.qmd\n    ```\n\n    This command creates a file named `webpage.qmd`.\n\n### Step 2: Edit the Quarto Document\n\n1.  Open `webpage.qmd` in your text editor.\n2.  You'll see some default content, including a title and some example text.\n3.  Modify the content to create your webpage. For example:\n\n    ```qmd\n    ---\n    title: \"My First Quarto Webpage\"\n    format: html\n    ---\n\n    ## Welcome!\n\n    This is my first webpage created with Quarto.\n\n    Here's a simple list:\n\n    * Item 1\n    * Item 2\n    * Item 3\n\n    You can also include code blocks:\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    print(\"Hello, Quarto!\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Hello, Quarto!\"\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n    And mathematical equations:\n\n    $$\n    E = mc^2\n    $$\n\n    You can add images too:\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    knitr::include_graphics(\"https://quarto.org/quarto.png\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](https://quarto.org/quarto.png){fig-pos='H'}\n    :::\n    :::\n\n\n\n\n\n    ```\n\n    **Explanation of the code:**\n\n    * `--- title: \"My First Quarto Webpage\" format: html ---` : This is the YAML header, which sets the title of your webpage and specifies the output format (HTML in this case).\n    * `## Welcome!` : This is a level 2 heading.\n    * `* Item 1` : This creates a bulleted list.\n    * ````{r}`: This begins a R code block.\n    * `$$E = mc^2$$`: This inserts a LaTeX equation.\n    * ````{r}`: This begins an R code block.\n    * `knitr::include_graphics(\"https://quarto.org/quarto.png\")`: This includes an image from a URL.\n\n### Step 3: Render the Webpage\n\n1.  In your terminal or command prompt, navigate to the directory containing `webpage.qmd`.\n2.  Run the following command to render the webpage:\n\n    ```bash\n    quarto render webpage.qmd\n    ```\n\n    This command will create an HTML file named `webpage.html` in the same directory.\n\n### Step 4: View the Webpage\n\n1.  Open `webpage.html` in your web browser.\n2.  You should see your webpage with the content you created.\n\n## Adding more content\n\nYou can add more content to your webpage by editing `webpage.qmd`. Quarto supports various types of content, including:\n\n* **Headings:** Use `#`, `##`, `###`, etc. for different heading levels.\n* **Paragraphs:** Just type your text.\n* **Lists:** Use `*` or `-` for unordered lists, and `1.`, `2.`, etc. for ordered lists.\n* **Code Blocks:** Use ````{language}` to insert code blocks.\n* **Mathematical Equations:** Use `$$` for LaTeX equations.\n* **Images:** Use `![alt text](path/to/image.png)` or ````{r} knitr::include_graphics(\"path/to/image.png\") ````.\n* **Links:** Use `[link text](url)`.\n* **Tables:** Use Markdown table syntax.\n\n## Further Exploration\n\n* Explore the Quarto documentation for more advanced features: [quarto.org](https://quarto.org/).\n* Experiment with different output formats, such as PDF or Word.\n* Learn about Quarto projects for creating multi-page websites.\n* Look into adding CSS and Javascript for styling and interactivity.\n\n## Publishing to Quarto Pub\n\nKnow how to publish your Quarto webpage to Quarto Pub, making it accessible online.\n\n## Prerequisites\n\n* All the prerequisites from the previous tutorial.\n* A Quarto Pub account. You can create one at [quarto.pub](https://quarto.pub/).\n\n### Step 1: Create a Quarto Webpage (If you haven't already)\n\nIf you haven't already created a Quarto webpage, follow the steps in the previous tutorial to create `webpage.qmd` and render it into `webpage.html`.\n\n### Step 2: Initialize Quarto Pub\n\n1.  Open your terminal or command prompt.\n2.  Navigate to the directory containing `webpage.qmd`.\n3.  Run the following command to initialize Quarto Pub:\n\n    ```bash\n    quarto publish quarto-pub\n    ```\n\n    This command will prompt you to log in to your Quarto Pub account. Follow the instructions to authenticate.\n\n### Step 3: Publish Your Webpage\n\n1.  After successful authentication, Quarto will detect the `webpage.html` file and ask you if you want to publish it.\n2.  Confirm that you want to publish the webpage.\n3.  Quarto will upload your webpage to Quarto Pub.\n4.  You'll receive a URL where your webpage is hosted.\n\n### Step 4: View Your Published Webpage\n\n1.  Open the URL provided by Quarto in your web browser.\n2.  You should see your webpage hosted on Quarto Pub.\n\n### Step 5: Updating your published page.\n\nIf you edit the `webpage.qmd` file, you will need to re-render the html file, and then republish.\n\n1.  Edit `webpage.qmd` with your text editor.\n2.  Render the html file again.\n\n    ```bash\n    quarto render webpage.qmd\n    ```\n\n3.  Republish the webpage.\n\n    ```bash\n    quarto publish quarto-pub\n    ```\n\n    Quarto Pub will update the existing webpage with the new content.\n\n## Important Considerations\n\n* **File Organization:** For more complex websites, consider creating a Quarto project. This will help you organize your files and manage your website more effectively.\n* **Custom Domains:** Quarto Pub allows you to use custom domains for your websites. Refer to the Quarto Pub documentation for instructions.\n* **Security:** Be mindful of the content you publish online. Avoid sharing sensitive information.\n* **Quarto Pub Limitations:** Quarto Pub has some limitations, especially for large or complex websites. For more advanced hosting options, consider using other platforms like Netlify or GitHub Pages.\n* **Free tier limitations:** The free tier of Quarto Pub has some limitations, regarding the number of deployments, and storage. Refer to the Quarto Pub documentation for the most up to date limitations.\n\n## Further Exploration\n\n* Explore the Quarto Pub documentation for more advanced features: [quarto.pub](https://quarto.pub/docs/).\n* Learn about Quarto projects for creating multi-page websites.\n* Experiment with different Quarto Pub settings and options.\n\n## Exercise\n\nNow create your own quarto workbook:\n\n1 - Download the [zip file of the project](https://github.com/fplmelo/rmda_ntu/blob/01f73a18d64f4d744df5db7f7f1150a585344fd5/exercises/week1-exercise.zip?raw=true)\n\n2- Tweak the `*qmd file` as you wish\n\n3 - Publish your workbook\n\n4 - Submit to the link to [NOW dropbox folder]()",
    "supporting": [
      "intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}