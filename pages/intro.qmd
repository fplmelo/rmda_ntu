---
title: "Intro do RM&DA "
subtitle: "Week 1"
description: ""
title-block-banner: "#9e043d"
toc: true
---

## Getting started with R and RStudio

**why R is a valuable tool?** for your studies and how to begin using it effectively, particularly with the RStudio IDE.

### Why R?

R was developed by statisticians as an **interactive environment for data analysis**, unlike programming languages like C or Java. This interactivity is crucial for the quick exploration of data, a necessity in data science. Although interactive, your work can be saved as **reproducible scripts**. While expert programmers may find its conventions different, R offers significant power in data analysis and data visualization.

Other attractive features of R include:

*   It is **free and open source**.
*   It runs on all major platforms: Windows, Mac OS, UNIX/Linux.
*   Scripts and data objects can be shared seamlessly across platforms.
*   It has a **large, growing, and active community** providing numerous learning resources.
*   It is easy for others to contribute add-ons (packages), giving users access to the latest methodologies and tools for various disciplines.

R's **primary design purpose** was to serve as an **interactive environment for data analysis**, having been developed by statisticians rather than software engineers for software development. This interactivity is highlighted as an **indispensable feature in data science** because it allows for the **ability to quickly explore data**, which is crucial for success in the field.

A **key benefit** of R, stemming directly from its design, is this **interactivity**, which enables data scientists to rapidly examine and understand their data. Furthermore, the ability to save interactive work as **scripts that can be easily executed** at any time provides a record of the analysis, making work **reproducible**. Beyond interactivity and reproducibility, the text also notes the **"unequal power of R when it comes to data analysis and, specifically, data visualization"** as a significant benefit that users will come to appreciate with patience.

### The R Console

Interactive data analysis usually takes place in the **R console**, which executes commands as you type them. You can access it by starting R on your computer. The chapter provides an example of calculating a tip using the console and explains the book's convention of using grey boxes for R code and `#> ` to denote console output.

### Scripts

A major advantage of R is the ability to **save your work as scripts**, which can be edited and saved using a text editor. The material in the book was developed using the **RStudio integrated development environment (IDE)**. RStudio offers an editor with R-specific features, a console, and other useful panes, including one for displaying figures. While some web-based R consoles offer script editing, not all allow saving. The R scripts used to generate the book are available on GitHub.

### RStudio

RStudio is presented as the primary tool for data science projects. It provides an editor for creating and editing scripts and other useful tools.

#### The panes

When you first open RStudio, you typically see three panes:
*   The **left pane** is the R console.
*   On the **right**, the **top pane** includes tabs like *Environment* and *History*.
*   The **bottom pane** shows tabs such as *Files*, *Plots*, *Packages*, *Help*, and *Viewer*.

#### Key bindings

RStudio allows you to use **key bindings** (keyboard shortcuts) for many tasks instead of using the mouse. The chapter recommends memorising key bindings for frequently used operations and notes that RStudio provides a cheat sheet with common commands.

#### Running commands while editing scripts

RStudio is specifically designed for R and offers advantages over other editors, such as the ability to **easily test code as you edit scripts**. To start a new script, you can go to *File* > *New File* > *R Script* or use the key binding Ctrl+Shift+N (Windows) or command+shift+N (Mac). The chapter explains how to save a script (Ctrl+S or command+S) and recommends using a descriptive name with lowercase letters, hyphens, and the `.R` suffix (e.g., `my-first-script.R`).

RStudio offers features like **auto-completion** when typing code, such as the `library()` function. To execute code from the script, you can click the **Run button** or use the key binding Ctrl+Shift+Enter (Windows) or command+shift+return (Mac), which will show the output in the R console and plots in the plots pane. You can also run **one line at a time** using Control-Enter (Windows) or command-return (Mac). The plots console allows you to navigate between plots, zoom, and save them.

#### Changing global options

RStudio's look and functionality can be customised via *Tools* > *Global Optionsâ€¦*. The chapter **highly recommends** changing the default setting for **"Save workspace to .RData on exit" to "Never"** and unchecking **"Restore .RData into workspace at start"**. This is advised to prevent confusion, especially when sharing code, as it avoids the assumption that colleagues have the `.RData` file.

### Installing R packages

The functionality of a fresh R installation (referred to as **base R**) is limited. Additional functionality comes from **packages**, which are add-ons contributed by developers and available from repositories like CRAN and GitHub. To install a package, such as `dslabs`, you can use the `install.packages()` function in the R console:

```R
install.packages ( "dslabs" )
```

Alternatively, you can use the *Tools* > *Install Packages* option in RStudio. Once installed, a package can be loaded into your R session using the `library()` function:

```R
library (dslabs)
```

You only need to install a package once unless you install a fresh version of R. You can install multiple packages at once by providing a character vector to `install.packages()`:

```R
install.packages ( c ( "tidyverse" ,  "dslabs" ))
```

Installing some packages, like `tidyverse`, may also install other **dependency** packages. When you load a package with `library()`, its dependencies are also loaded. It is useful to keep a list of needed packages in a script for easy re-installation if required. You can see all installed packages using the `installed.packages()` function. Importantly, packages are installed in R, not RStudio.