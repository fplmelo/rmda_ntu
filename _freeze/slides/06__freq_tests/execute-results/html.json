{
  "hash": "855ce955016b7cc0dce057e2ef83f136",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"5-Freqency Tests\"\nsubtitle: \" \"\nauthor: \"Felipe Melo\"\ninstitute: \"Nottingham Trent University - UK\"\nfrom: markdown+emoji\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    incremental: false\n    chalkboard: true\n    logo: img/ntu_logo.png\n    footer: \"Research Methods & Data Analysis\"\n    slide-number: true\n    transition: slide\n    background-transition: fade\n    #auto-stretch: true\n    title-block-banner: true\n\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## You should know today:\n\n- Know when to use frequency tests\n- Work with tables and graphs\n- Understand the logic of independence between variables\n\n\n## Types of variables (review)\n\n::::{.columns}\n:::{.column .fragment}\n**Categorical**\n\n![](https://static-assets.codecademy.com/Courses/Hypothesis-Testing/Intro_to_variable_types_3.png)\n\n:::\n\n:::{.column .fragment}\n**Numerical**\n\n![](https://static-assets.codecademy.com/Courses/Hypothesis-Testing/Intro_to_variable_types_4.png)\n\n:::\n::::\n\n## Back to the toolbox\n\n![](img/toolkit.png){fig-align=\"center\"}\n\n\n## Let's imagine Ladybirds\n\n:::{.panel-tabset}\n\n## Ladybirds\n\n![](img/ladybirds.png){width=\"40%\" fig-align=\"center\"}\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nladybirds <- tribble(\n  ~Habitat, ~Site, ~Colour, ~Number,\n  \"Rural\", \"R1\", \"Black\", 10,\n  \"Rural\", \"R2\", \"Black\", 3,\n  \"Rural\", \"R3\", \"Black\", 4,\n  \"Rural\", \"R4\", \"Black\", 7,\n  \"Rural\", \"R5\", \"Black\", 6,\n  \"Rural\", \"R1\", \"Red\", 15,\n  \"Rural\", \"R2\", \"Red\", 18,\n  \"Rural\", \"R3\", \"Red\", 9,\n  \"Rural\", \"R4\", \"Red\", 12,\n  \"Rural\", \"R5\", \"Red\", 16,\n  \"Industrial\", \"U1\", \"Black\", 32,\n  \"Industrial\", \"U2\", \"Black\", 25,\n  \"Industrial\", \"U3\", \"Black\", 25,\n  \"Industrial\", \"U4\", \"Black\", 17,\n  \"Industrial\", \"U5\", \"Black\", 16,\n  \"Industrial\", \"U1\", \"Red\", 17,\n  \"Industrial\", \"U2\", \"Red\", 23,\n  \"Industrial\", \"U3\", \"Red\", 21,\n  \"Industrial\", \"U4\", \"Red\", 9,\n  \"Industrial\", \"U5\",  \n \"Red\", 15\n)\n```\n:::\n\n\n\n## Data\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 Ã— 4\n   Habitat    Site  Colour Number\n   <chr>      <chr> <chr>   <dbl>\n 1 Rural      R1    Black      10\n 2 Rural      R2    Black       3\n 3 Rural      R3    Black       4\n 4 Rural      R4    Black       7\n 5 Rural      R5    Black       6\n 6 Rural      R1    Red        15\n 7 Rural      R2    Red        18\n 8 Rural      R3    Red         9\n 9 Rural      R4    Red        12\n10 Rural      R5    Red        16\n11 Industrial U1    Black      32\n12 Industrial U2    Black      25\n13 Industrial U3    Black      25\n14 Industrial U4    Black      17\n15 Industrial U5    Black      16\n16 Industrial U1    Red        17\n17 Industrial U2    Red        23\n18 Industrial U3    Red        21\n19 Industrial U4    Red         9\n20 Industrial U5    Red        15\n```\n\n\n:::\n:::\n\n\n\n## Table 1\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nladybirds%>% \n  group_by(Habitat, Colour) %>% \n  summarize(count = sum(Number)) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|Habitat    |Colour | count|\n|:----------|:------|-----:|\n|Industrial |Black  |   115|\n|Industrial |Red    |    85|\n|Rural      |Black  |    30|\n|Rural      |Red    |    70|\n\n\n:::\n:::\n\n\n\n## Table 2\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nladybirds%>% \n  group_by(Habitat, Colour) %>% \n  summarize(count = sum(Number)) %>% \n  spread(Colour, count, fill = 0) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|Habitat    | Black| Red|\n|:----------|-----:|---:|\n|Industrial |   115|  85|\n|Rural      |    30|  70|\n\n\n:::\n:::\n\n\n:::\n\n## Is there an association between colour and habitat?{.center}\n\n## Tweaking tables\n\n:::{.panel-tabset}\n\n## Code\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nladybirds |> \n  group_by(Habitat, Colour) |> \n  summarize(count = sum(Number)) |> \n  mutate(prop=count/sum(count)) |>   # our new proportion variable\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|Habitat    |Colour | count|  prop|\n|:----------|:------|-----:|-----:|\n|Industrial |Black  |   115| 0.575|\n|Industrial |Red    |    85| 0.425|\n|Rural      |Black  |    30| 0.300|\n|Rural      |Red    |    70| 0.700|\n\n\n:::\n:::\n\n\n\n## Code 2\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nladybirds |> \n  group_by(Habitat, Colour) |> \n  summarize(count = sum(Number)) |> \n  mutate(prop=count/sum(count)) |>   # our new proportion variable\n  select(Habitat, Colour, prop) |> \n  spread(Habitat, prop) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|Colour | Industrial| Rural|\n|:------|----------:|-----:|\n|Black  |      0.575|   0.3|\n|Red    |      0.425|   0.7|\n\n\n:::\n:::\n\n\n\n## Code 3\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nlibrary(janitor)\nladybirds |> \n  group_by(Habitat, Colour) %>% \n  summarize(count = sum(Number)) %>% \n  spread(Colour, count, fill = 0)|> \n  adorn_totals(c(\"row\", \"col\")) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|Habitat    | Black| Red| Total|\n|:----------|-----:|---:|-----:|\n|Industrial |   115|  85|   200|\n|Rural      |    30|  70|   100|\n|Total      |   145| 155|   300|\n\n\n:::\n:::\n\n\n:::\n\n## Proportions\n\n:::{.panel-tabset}\n\n## Total\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nladybirds |> \n  group_by(Habitat, Colour) %>% \n  summarize(count = sum(Number)) %>% \n  spread(Colour, count, fill = 0) |> \n  column_to_rownames(\"Habitat\") |> \n  proportions() |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|           |     Black|       Red|\n|:----------|---------:|---------:|\n|Industrial | 0.3833333| 0.2833333|\n|Rural      | 0.1000000| 0.2333333|\n\n\n:::\n:::\n\n\n\n## Rows\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nladybirds |> \n  group_by(Habitat, Colour) %>% \n  summarise(count = sum(Number)) %>% \n  spread(Colour, count, fill = 0) |> \n  column_to_rownames(\"Habitat\") |> \n  as.matrix()->t\n  proportions(t,1) |> \n    kable()\n```\n\n::: {.cell-output-display}\n\n\n|           | Black|   Red|\n|:----------|-----:|-----:|\n|Industrial | 0.575| 0.425|\n|Rural      | 0.300| 0.700|\n\n\n:::\n:::\n\n\n\n## Columns\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nladybirds |> \n  group_by(Habitat, Colour) %>% \n  summarise(count = sum(Number)) %>% \n  spread(Colour, count, fill = 0) |> \n  column_to_rownames(\"Habitat\") |> \n  as.matrix()->t\n  proportions(t,2) |> \n    kable()\n```\n\n::: {.cell-output-display}\n\n\n|           |     Black|       Red|\n|:----------|---------:|---------:|\n|Industrial | 0.7931034| 0.5483871|\n|Rural      | 0.2068966| 0.4516129|\n\n\n:::\n:::\n\n\n:::\n\n## All at once\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nCrossTable(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n \n   Cell Contents\n|-------------------------|\n|                       N |\n| Chi-square contribution |\n|           N / Row Total |\n|           N / Col Total |\n|         N / Table Total |\n|-------------------------|\n\n \nTotal Observations in Table:  300 \n\n \n             |  \n             |     Black |       Red | Row Total | \n-------------|-----------|-----------|-----------|\n  Industrial |       115 |        85 |       200 | \n             |     3.477 |     3.253 |           | \n             |     0.575 |     0.425 |     0.667 | \n             |     0.793 |     0.548 |           | \n             |     0.383 |     0.283 |           | \n-------------|-----------|-----------|-----------|\n       Rural |        30 |        70 |       100 | \n             |     6.954 |     6.505 |           | \n             |     0.300 |     0.700 |     0.333 | \n             |     0.207 |     0.452 |           | \n             |     0.100 |     0.233 |           | \n-------------|-----------|-----------|-----------|\nColumn Total |       145 |       155 |       300 | \n             |     0.483 |     0.517 |           | \n-------------|-----------|-----------|-----------|\n\n \n```\n\n\n:::\n:::\n\n\n\n\n## End of DA class{.center}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}