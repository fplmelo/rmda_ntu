---
title: "Week 2 - Data Wrangling & Research Questions"
subtitle: "RMDA ARES40011"
author: "Felipe Melo"
date: "last-modified"
date-format: "long"
format:
  html:
    toc: true
---

![](/img/dplyr_wrangling.png){width="500"}

[Artwork by \@allison_horst](https://twitter.com/allison_horst){style="text-align: center"}

# Preparation

## Learning objectives

| Research Methods | Data Analyses |
|----|----|
| Reflect on how to make good research questions | Manipulate datasets as needed |
|  | Use **Tidyverse** R package |
|  | Produce simple tables and summaries |

## Prerequisites

Before you begin, ensure you have the following installed:

-   **R**: You can download the latest version from the official R website. Instructions for different operating systems (Windows, Mac OS, UNIX/Linux) are available \[8\]. **R must be installed before installing RStudio** \[9\].

-   **RStudio**: Download and install RStudio Desktop from <https://www.rstudio.com/> \[10\]. To open RStudio, locate it in your applications and launch it \[11\].

-   **tidyverse package**: Install the **tidyverse** package within R. Open RStudio and in the **Console** pane, type and run the following command \[12\]:

    ``` r
    install.packages("tidyverse")
    ```

This command needs to be run **only the first time** you want to use the **tidyverse**. You can also install packages by navigating to **Tools** -\> **Install Packages** in RStudio.

## Readings

-   {{< fa book >}} Check chapters 1 to 3 of the e-book [Tidyverse Skills for Data Science](https://jhudatascience.org/tidyversecourse/intro.html)
-   {{< fa tools >}} [Data tidying with tidyr :: Cheatsheet](https://rstudio.github.io/cheatsheets/html/tidyr.html?_gl=1*17wj54u*_ga*NzI5NTAxMDIzLjE3NDI0Njc1OTk.*_ga_2C0WZ1JHG0*MTc0NDAyNDc5My4zLjEuMTc0NDAyNDgzNC4wLjAuMA..)
-   {{< fa tools >}} [Data transformation with dplyr :: Cheatsheet](https://rstudio.github.io/cheatsheets/html/data-transformation.html?_gl=1*ny4r9m*_ga*NzI5NTAxMDIzLjE3NDI0Njc1OTk.*_ga_2C0WZ1JHG0*MTc0NDAyNDc5My4zLjEuMTc0NDAyNDgzNC4wLjAuMA..)

# Lesson

{{< revealjs file="https://fplmelo.github.io/rmda_ntu/slides/02_data_wrangling.html#/title-slide" height="500px" class="ratio ratio-16x9" >}}




{{< revealjs file="https://fplmelo.github.io/rmda_ntu/slides/2.2_research_question.html#/title-slide" height="500px" class="ratio ratio-16x9" >}}

# Exercise

Approximate time: 60 min

## Learning Objectives

-   Demonstrate how to subset, merge, and create new datasets from existing data structures in R.
-   Perform basic data wrangling with functions in the Tidyverse package.

# Data Wrangling with Tidyverse

The [Tidyverse suite of integrated packages](https://www.tidyverse.org/packages/) are designed to work together to make common data science operations more user friendly. The packages have functions for data wrangling, tidying, reading/writing, parsing, and visualizing, among others. There is a freely available book, [R for Data Science](http://r4ds.had.co.nz/index.html), with detailed descriptions and practical examples of the tools available and how they work together. We will explore the basic syntax for working with these packages, as well as, specific functions for data wrangling with the 'dplyr' package and data visualization with the 'ggplot2' package.

![](/img/tidyverse_website.png){fig-align="center"}

## Tidyverse basics

The Tidyverse suite of packages introduces users to a set of data structures, functions and operators to make working with data more intuitive, but is slightly different from the way we do things in base R. **Two important new concepts we will focus on are pipes and tibbles**.

Before we get started with pipes or tibbles, let's load the library:

```         
library(tidyverse)
```

### Pipes

Stringing together commands in R can be quite daunting. Also, trying to understand code that has many nested functions can be confusing.

To make R code more human readable, the Tidyverse tools use the pipe, `%>%`, which was acquired from the `magrittr` package and is now part of the `dplyr` package that is installed automatically with Tidyverse. **The pipe allows the output of a previous command to be used as input to another command instead of using nested functions.**

> **NOTE:** Shortcut to write the pipe is <kbd>shift</kbd> + <kbd>command/ctrl</kbd> + <kbd>M</kbd>

An example of using the pipe to run multiple commands:

``` r
## A single command
sqrt(83)

## Base R method of running more than one command
round(sqrt(83), digits = 2)

## Running more than one command with piping
sqrt(83) %>% round(digits = 2)
```

The pipe represents a much easier way of writing and deciphering R code, and so we will be taking advantage of it, when possible, as we work through the remaining lesson.

------------------------------------------------------------------------

**Exercises**

1.  Create a vector of random numbers using the code below:

    ``` r
    random_numbers <- c(81, 90, 65, 43, 71, 29)
    ```

2.  Use the pipe (`%>%`) to perform two steps in a single line:

    1.  Take the mean of `random_numbers` using the `mean()` function.
    2.  Round the output to three digits using the `round()` function.

------------------------------------------------------------------------

### Tibbles

A core component of the [tidyverse](http://tidyverse.org/) is the [tibble](http://tibble.tidyverse.org/). **Tibbles are a modern rework of the standard `data.frame`, with some internal improvements** to make code more reliable. They are data frames, but do not follow all of the same rules. For example, tibbles can have numbers/symbols for column names, which is not normally allowed in base R.

**Important: [tidyverse](http://tidyverse.org/) is very opininated about row names**. These packages insist that all column data (e.g. `data.frame`) be treated equally, and that special designation of a column as `rownames` should be deprecated. [Tibble](http://tibble.tidyverse.org/) provides simple utility functions to handle rownames: `rownames_to_column()` and `column_to_rownames()`.

Tibbles can be created directly using the `tibble()` function or data frames can be converted into tibbles using `as_tibble(name_of_df)`.

> **NOTE:** The function `as_tibble()` will ignore row names, so if a column representing the row names is needed, then the function `rownames_to_column(name_of_df)` should be run prior to turning the data.frame into a tibble. Also, `as_tibble()` will not coerce character vectors to factors by default.

## Penguin Data Wrangling with Tidyverse

Objective: To practice fundamental data wrangling techniques using the dplyr package within the tidyverse on the palmerpenguins dataset. This exercise will cover selecting, filtering, mutating, grouping, and summarizing data to gain insights into the penguin populations.

**Prerequisites**:

• Ensure you have the tidyverse package installed (`install.packages("tidyverse")`).

• Load the tidyverse library at the beginning of your R session (`library(tidyverse)`). This will automatically load dplyr and the `palmerpenguins` dataset.

Instructions:

1. Inspect the Data: Begin by examining the penguins dataset. Use the `glimpse()` function from dplyr to get a concise overview of the dataset's structure, including the column names and data types. You can also use `head()` to view the first few rows.

2. Select Relevant Columns: For this exercise, we will focus on the species and the physical measurements of the penguins. Use the `select()` function to create a new tibble named penguin_measurements containing only the species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, and body_mass_g columns.

3. Handle Missing Data: Notice that there might be missing values (represented as NA) in the body_mass_g column. Use the `filter()` function along with `!is.na()` to create a new tibble named penguin_no_na that excludes rows where body_mass_g is NA. The exclamation mark `!` negates the condition, so we are keeping the rows where body_mass_g is not missing.

4. Create a New Variable: The body_mass_g is currently in grams. Use the `mutate()` function to add a new column named body_mass_kg that converts the body mass to kilograms (1 kg = 1000 g).

5. Group Data: To compare the physical characteristics of different penguin populations, use the `group_by()` function to group the penguin_with_kg tibble by both species and island. This will prepare the data for summary calculations within each group.

6. Summarize Data: Now, use the `summarise()` function to calculate the mean bill length, mean bill depth, mean flipper length, and mean body mass (in kg) for each group created in the previous step. Name the new summary columns mean_bill_length_mm, mean_bill_depth_mm, mean_flipper_length_mm, and mean_body_mass_kg respectively.

7. Arrange the Results: Finally, use the `arrange()` function to sort the penguin_summary tibble first by island and then by mean_body_mass_kg in descending order (largest mean body mass first). You can use the `desc()` function within `arrange()` for descending order.

8. View the Output: Print the final_summary tibble to see the results of your data wrangling steps.


### Further Exploration (Optional):

• Try filtering for a specific species or island before grouping and summarizing.

• Use the `count()` function to see the number of observations in each group before calculating the mean.

• Experiment with creating other new variables using mutate(), such as the ratio of bill length to bill depth.

This exercise provides a hands-on introduction to several key data wrangling verbs in dplyr, demonstrating how to transform and summarize data effectively within the tidyverse framework. The use of the pipe operator `%>%` allows for a more readable and sequential flow of data manipulation.

## Next steps

Now that we have our results ready for plotting, we can use the [ggplot2](https://ggplot2.tidyverse.org) package to plot our results. If you are interested, you can follow [this lesson](https://hbctraining.github.io/Training-modules/Tidyverse_ggplot2/lessons/03_ggplot2.html) and dive into how to use `ggplot2` to create the plots with this dataset.

### Additional resources

-   [R for Data Science](http://r4ds.had.co.nz)
-   [teach the tidyverse](http://varianceexplained.org/r/teach-tidyverse/)
-   [tidy style guide](http://style.tidyverse.org/)

------------------------------------------------------------------------

*This lesson has been developed by members of the teaching team at the [Harvard Chan Bioinformatics Core (HBC)](http://bioinformatics.sph.harvard.edu/). These are open access materials distributed under the terms of the [Creative Commons Attribution license](https://creativecommons.org/licenses/by/4.0/) (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.*
