{
  "hash": "b6a6e7caacb5379b4b16120ecb80ced6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic Introduction to R and Rstudio\"\nsubtitle: \"RMDA ARES40011\"\nauthor: \"Felipe Melo\"\ndate: \"last-modified\"\ndate-format: \"long\"\nformat:\n  html:\n    toc: true\n---\n\n\n\n# Objectives\n\n-   Describe the purpose and use of each pane in RStudio\n-   Locate buttons and options in RStudio\n-   Define a variable\n-   Assign data to a variable\n-   Manage a workspace in an interactive R session\n-   Use mathematical and comparison operators\n-   Call functions\n-   Manage packages\n\n# Questions\n\n-   How to find your way around RStudio?\n-   How to interact with R?\n-   How to manage your environment?\n-   How to install packages?\n\n## Why use R and R studio?\n\nWelcome to the R portion of the Software Carpentry workshop!\n\nScience is a multi-step process: once you've designed an experiment and collected data, the real fun begins with analysis! Throughout this lesson, we're going to teach you some of the fundamentals of the R language as well as some best practices for organizing code for scientific projects that will make your life easier.\n\nAlthough we could use a spreadsheet in Microsoft Excel or Google sheets to analyze our data, these tools are limited in their flexibility and accessibility. Critically, they also are difficult to share steps which explore and change the raw data, which is key to [\"reproducible\" research](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003285).\n\nTherefore, this lesson will teach you how to begin exploring your data using R and RStudio. The R program is available for Windows, Mac, and Linux operating systems, and is a freely-available where you downloaded it above. To run R, all you need is the R program.\n\nHowever, to make using R easier, we will use the program RStudio, which we also downloaded above. RStudio is a free, open-source, Integrated Development Environment (IDE). It provides a built-in editor, works on all platforms (including on servers) and provides many advantages such as integration with version control and project management.\n\n# Overview\n\nWe will begin with raw data, perform exploratory analyses, and learn how to plot results graphically. This example starts with a dataset from [gapminder.org](https://www.gapminder.org) containing population information for many countries through time. Can you read the data into R? Can you plot the population for Senegal? Can you calculate the average income for countries on the continent of Asia? By the end of these lessons you will be able to do things like plot the populations for all of these countries in under a minute!\n\n**Basic layout**\n\nWhen you first open RStudio, you will be greeted by three panels:\n\n-   The interactive R console/Terminal (entire left)\n-   Environment/History/Connections (tabbed in upper right)\n-   Files/Plots/Packages/Help/Viewer (tabbed in lower right)\n\n![](/img/01-rstudio.png){alt=\"RStudio layout\"}\n\nOnce you open files, such as R scripts, an editor panel will also open in the top left.\n\n![](/img/01-rstudio-script.png){alt=\"RStudio layout with .R file open\"}\n\n## R scripts\n\nAny commands that you write in the R console can be saved to a file to be re-run again. Files containing R code to be ran in this way are called R scripts. R scripts have `.R` at the end of their names to let you know what they are.\n\n## Workflow within RStudio\n\nThere are two main ways one can work within RStudio:\n\n1.  Test and play within the interactive R console then copy code into a .R file to run later.\n\n-   This works well when doing small tests and initially starting off.\n-   It quickly becomes laborious\n\n2.  Start writing in a .R file and use RStudio's short cut keys for the Run command to push the current line, selected lines or modified lines to the interactive R console.\n\n-   This is a great way to start; all your code is saved for later\n-   You will be able to run the file you create from within RStudio or using R's `source()` function.\n\n::: {.callout-tip}\n## Tip: Running segments of your code\n\nRStudio offers you great flexibility in running code from within the editor window. There are buttons, menu choices, and keyboard shortcuts. To run the current line, you can\n\n1.  click on the `Run` button above the editor panel, or\n2.  select \"Run Lines\" from the \"Code\" menu, or\n3.  hit <kbd>Ctrl</kbd>+<kbd>Return</kbd> in Windows or Linux or <kbd>âŒ˜</kbd>+<kbd>Return</kbd> on OS X. (This shortcut can also be seen by hovering the mouse over the button). To run a block of code, select it and then `Run`. If you have modified a line of code within a block of code you have just run, there is no need to reselect the section and `Run`, you can use the next button along, `Re-run the previous region`. This will run the previous code block including the modifications you have made.\n:::\n\n## Introduction to R\n\nMuch of your time in R will be spent in the R interactive console. This is where you will run all of your code, and can be a useful environment to try out ideas before adding them to an R script file. This console in RStudio is the same as the one you would get if you typed in `R` in your command-line environment.\n\nThe first thing you will see in the R interactive session is a bunch of information, followed by a \"\\>\" and a blinking cursor. In many ways this is similar to the shell environment you learned about during the shell lessons: it operates on the same idea of a \"Read, evaluate, print loop\": you type in commands, R tries to execute them, and then returns a result.\n\n## Using R as a calculator\n\nThe simplest thing you could do with R is to do arithmetic:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 101\n```\n\n\n:::\n:::\n\n\n\nAnd R will print out the answer, with a preceding \"\\[1\\]\". \\[1\\] is the index of the first element of the line being printed in the console. For more information on indexing vectors, see [Episode 6: Subsetting Data](https://swcarpentry.github.io/r-novice-gapminder/06-data-subsetting/index.html).\n\nIf you type in an incomplete command, R will wait for you to complete it. If you are familiar with Unix Shell's bash, you may recognize this behavior from bash.\n\n``` r\n> 1 +\n```\n\n``` output\n+\n```\n\nAny time you hit return and the R session shows a \"+\" instead of a \"\\>\", it means it's waiting for you to complete the command. If you want to cancel a command you can hit <kbd>Esc</kbd> and RStudio will give you back the \"\\>\" prompt.\n\n::: {.callout-tip}\n## Tip: Canceling commands\n\nIf you're using R from the command line instead of from within RStudio, you need to use <kbd>Ctrl</kbd>+<kbd>C</kbd> instead of <kbd>Esc</kbd> to cancel the command. This applies to Mac users as well!\n\nCanceling a command isn't only useful for killing incomplete commands: you can also use it to tell R to stop running code (for example if it's taking much longer than you expect), or to get rid of the code you're currently writing.\n:::\n\nWhen using R as a calculator, the order of operations is the same as you would have learned back in school.\n\nFrom highest to lowest precedence:\n\n-   Parentheses: `(`, `)`\n-   Exponents: `^` or `**`\n-   Multiply: `*`\n-   Divide: `/`\n-   Add: `+`\n-   Subtract: `-`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13\n```\n\n\n:::\n:::\n\n\n\nUse parentheses to group operations in order to force the order of evaluation if it differs from the default, or to make clear what you intend.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(3 + 5) * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n:::\n\n\n\nThis can get unwieldy when not needed, but clarifies your intentions. Remember that others may later read your code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(3 + (5 * (2 ^ 2))) # hard to read\n3 + 5 * 2 ^ 2       # clear, if you remember the rules\n3 + 5 * (2 ^ 2)     # if you forget some rules, this might help\n```\n:::\n\n\n\nThe text after each line of code is called a \"comment\". Anything that follows after the hash (or octothorpe) symbol `#` is ignored by R when it executes code.\n\nReally small or large numbers get a scientific notation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2/10000\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2e-04\n```\n\n\n:::\n:::\n\n\n\nWhich is shorthand for \"multiplied by `10^XX`\". So `2e-4` is shorthand for `2 * 10^(-4)`.\n\nYou can write numbers in scientific notation too:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5e3  # Note the lack of minus here\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5000\n```\n\n\n:::\n:::\n\n\n\n## Mathematical functions\n\nR has many built in mathematical functions. To call a function, we can type its name, followed by open and closing parentheses. Functions take arguments as inputs, anything we type inside the parentheses of a function is considered an argument. Depending on the function, the number of arguments can vary from none to multiple. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd() #returns an absolute filepath\n```\n:::\n\n\n\ndoesn't require an argument, whereas for the next set of mathematical functions we will need to supply the function a value in order to compute the result.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsin(1)  # trigonometry functions\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.841471\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(1)  # natural logarithm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog10(10) # base-10 logarithm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexp(0.5) # e^(1/2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.648721\n```\n\n\n:::\n:::\n\n\n\nDon't worry about trying to remember every function in R. You can look them up on Google, or if you can remember the start of the function's name, use the tab completion in RStudio.\n\nThis is one advantage that RStudio has over R on its own, it has auto-completion abilities that allow you to more easily look up functions, their arguments, and the values that they take.\n\nTyping a `?` before the name of a command will open the help page for that command. When using RStudio, this will open the 'Help' pane; if using R in the terminal, the help page will open in your browser. The help page will include a detailed description of the command and how it works. Scrolling to the bottom of the help page will usually show a collection of code examples which illustrate command usage. We'll go through an example later.\n\n## Comparing things\n\nWe can also do comparisons in R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 == 1  # equality (note two equals signs, read as \"is equal to\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1 != 2  # inequality (read as \"is not equal to\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1 < 2  # less than\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1 <= 1  # less than or equal to\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1 > 0  # greater than\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1 >= -9 # greater than or equal to\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip}\n## Tip: Comparing Numbers\n\nA word of warning about comparing numbers: you should never use `==` to compare two numbers unless they are integers (a data type which can specifically represent only whole numbers).\n\nComputers may only represent decimal numbers with a certain degree of precision, so two numbers which look the same when printed out by R, may actually have different underlying representations and therefore be different by a small margin of error (called Machine numeric tolerance).\n\nInstead you should use the `all.equal` function.\n\nFurther reading: [http://floating-point-gui.de/](https://floating-point-gui.de/)\n:::\n\n## Variables and assignment\n\nWe can store values in variables using the assignment operator `<-`, like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1/40\n```\n:::\n\n\n\nNotice that assignment does not print a value. Instead, we stored it for later in something called a **variable**. `x` now contains the **value** `0.025`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.025\n```\n\n\n:::\n:::\n\n\n\nMore precisely, the stored value is a *decimal approximation* of this fraction called a [floating point number](https://en.wikipedia.org/wiki/Floating_point).\n\nLook for the `Environment` tab in the top right panel of RStudio, and you will see that `x` and its value have appeared. Our variable `x` can be used in place of a number in any calculation that expects a number:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -3.688879\n```\n\n\n:::\n:::\n\n\n\nNotice also that variables can be reassigned:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 100\n```\n:::\n\n\n\n`x` used to contain the value 0.025 and now it has the value 100.\n\nAssignment values can contain the variable being assigned to:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- x + 1 #notice how RStudio updates its description of x on the top right tab\ny <- x * 2\n```\n:::\n\n\n\nThe right hand side of the assignment can be any valid R expression. The right hand side is *fully evaluated* before the assignment occurs.\n\nVariable names can contain letters, numbers, underscores and periods but no spaces. They must start with a letter or a period followed by a letter (they cannot start with a number nor an underscore). Variables beginning with a period are hidden variables. Different people use different conventions for long variable names, these include\n\n-   periods.between.words\n-   underscores_between_words\n-   camelCaseToSeparateWords\n\nWhat you use is up to you, but **be consistent**.\n\nIt is also possible to use the `=` operator for assignment:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 1/40\n```\n:::\n\n\n\nBut this is much less common among R users. The most important thing is to **be consistent** with the operator you use. There are occasionally places where it is less confusing to use `<-` than `=`, and it is the most common symbol used in the community. So the recommendation is to use `<-`.\n\n:::: {.callout-caution collapse=\"false\"}\n## Challenge 1\n\nWhich of the following are valid R variable names?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_height\nmax.height\n_age\n.mass\nMaxLength\nmin-length\n2widths\ncelsius2kelvin\n```\n:::\n\n\n\n::: {.callout-caution collapse=\"true\"}\n## Solution to challenge 1\n\nThe following can be used as R variables:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_height\nmax.height\nMaxLength\ncelsius2kelvin\n```\n:::\n\n\n\nThe following creates a hidden variable:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.mass\n```\n:::\n\n\n\nThe following will not be able to be used to create a variable\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n_age\nmin-length\n2widths\n```\n:::\n\n\n:::\n::::\n\n## Vectorization\n\nOne final thing to be aware of is that R is *vectorized*, meaning that variables and functions can have vectors as values. In contrast to physics and mathematics, a vector in R describes a set of values in a certain order of the same data type. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\n2^(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  8 16 32\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- 1:5\n2^x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  8 16 32\n```\n\n\n:::\n:::\n\n\n\nThis is incredibly powerful; we will discuss this further in an upcoming lesson.\n\n## Managing your environment\n\nThere are a few useful commands you can use to interact with the R session.\n\n`ls` will list all of the variables and functions stored in the global environment (your working R session):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x\" \"y\"\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip}\n## Tip: hidden objects\n\nLike in the shell, `ls` will hide any variables or functions starting with a \".\" by default. To list all objects, type `ls(all.names=TRUE)` instead\n:::\n\nNote here that we didn't give any arguments to `ls`, but we still needed to give the parentheses to tell R to call the function.\n\nIf we type `ls` by itself, R prints a bunch of code instead of a listing of objects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, \n    pattern, sorted = TRUE) \n{\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n<bytecode: 0x5a4bf7814be0>\n<environment: namespace:base>\n```\n\n\n:::\n:::\n\n\n\nWhat's going on here?\n\nLike everything in R, `ls` is the name of an object, and entering the name of an object by itself prints the contents of the object. The object `x` that we created earlier contains 1, 2, 3, 4, 5:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\nThe object `ls` contains the R code that makes the `ls` function work! We'll talk more about how functions work and start writing our own later.\n\nYou can use `rm` to delete objects you no longer need:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x)\n```\n:::\n\n\n\nIf you have lots of things in your environment and want to delete all of them, you can pass the results of `ls` to the `rm` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n\nIn this case we've combined the two. Like the order of operations, anything inside the innermost parentheses is evaluated first, and so on.\n\nIn this case we've specified that the results of `ls` should be used for the `list` argument in `rm`. When assigning values to arguments by name, you *must* use the `=` operator!!\n\nIf instead we use `<-`, there will be unintended side effects, or you may get an error message:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list <- ls())\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rm(list <- ls()): ... deve conter nomes ou cadeia de caracteres\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip}\n## Tip: Warnings vs. Errors\n\nPay attention when R does something unexpected! Errors, like above, are thrown when R cannot proceed with a calculation. Warnings on the other hand usually mean that the function has run, but it probably hasn't worked as expected.\n\nIn both cases, the message that R prints out usually give you clues how to fix a problem.\n:::\n\n## R Packages\n\nIt is possible to add functions to R by writing a package, or by obtaining a package written by someone else. As of this writing, there are over 10,000 packages available on CRAN (the comprehensive R archive network). R and RStudio have functionality for managing packages:\n\n-   You can see what packages are installed by typing `installed.packages()`\n-   You can install packages by typing `install.packages(\"packagename\")`, where `packagename` is the package name, in quotes.\n-   You can update installed packages by typing `update.packages()`\n-   You can remove a package with `remove.packages(\"packagename\")`\n-   You can make a package available for use with `library(packagename)`\n\nPackages can also be viewed, loaded, and detached in the Packages tab of the lower right panel in RStudio. Clicking on this tab will display all of the installed packages with a checkbox next to them. If the box next to a package name is checked, the package is loaded and if it is empty, the package is not loaded. Click an empty box to load that package and click a checked box to detach that package.\n\nPackages can be installed and updated from the Package tab with the Install and Update buttons at the top of the tab.\n\n## Exercises\n\n:::: {.callout-caution collapse=\"false\"}\n## Challenge 2\n\nWhat will be the value of each variable after each statement in the following program?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- 47.5\nage <- 122\nmass <- mass * 2.3\nage <- age - 20\n```\n:::\n\n\n\n::: {.callout-caution collapse=\"true\"}\n## Solution to challenge 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- 47.5\n```\n:::\n\n\n\nThis will give a value of 47.5 for the variable mass\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- 122\n```\n:::\n\n\n\nThis will give a value of 122 for the variable age\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- mass * 2.3\n```\n:::\n\n\n\nThis will multiply the existing value of 47.5 by 2.3 to give a new value of 109.25 to the variable mass.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- age - 20\n```\n:::\n\n\n\nThis will subtract 20 from the existing value of 122 to give a new value of 102 to the variable age.\n:::\n::::\n\n:::: {.callout-caution collapse=\"false\"}\n## Challenge 3\n\nRun the code from the previous challenge, and write a command to compare mass to age. Is mass larger than age?\n\n::: {.callout-caution collapse=\"true\"}\n## Solution to challenge 3\n\nOne way of answering this question in R is to use the `>` to set up the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass > age\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nThis should yield a boolean value of TRUE since 109.25 is greater than 102.\n:::\n::::\n\n:::: {.callout-caution collapse=\"false\"}\n## Challenge 4\n\nClean up your working environment by deleting the mass and age variables.\n\n::: {.callout-caution collapse=\"true\"}\n## Solution to challenge 4\n\nWe can use the `rm` command to accomplish this task\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(age, mass)\n```\n:::\n\n\n:::\n::::\n\n:::: {.callout-caution collapse=\"false\"}\n## Challenge 5\n\nInstall the following packages: `ggplot2`, `plyr`, `gapminder`\n\n::: {.callout-caution collapse=\"true\"}\n## Solution to challenge 5\n\nWe can use the `install.packages()` command to install the required packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\ninstall.packages(\"plyr\")\ninstall.packages(\"gapminder\")\n```\n:::\n\n\n\nAn alternate solution, to install multiple packages with a single `install.packages()` command is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"ggplot2\", \"plyr\", \"gapminder\"))\n```\n:::\n\n\n:::\n::::\n\n\nWhen installing ggplot2, it may be required for some users to use the dependencies flag as a result of lazy loading affecting the install. This suggestion is not tied to any known bug discussion, and is advised based off instructor feedback/experience in resolving stochastic occurences of errors identified through delivery of this workshop:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\", dependencies = TRUE)\n```\n:::\n\n\n\n\n::: {.callout-important}\n-   Use RStudio to write and run R programs.\n-   R has the usual arithmetic operators and mathematical functions.\n-   Use `<-` to assign values to variables.\n-   Use `ls()` to list the variables in a program.\n-   Use `rm()` to delete objects in a program.\n-   Use `install.packages()` to install packages (libraries).\n:::\n\n\nThis learning material was modified after the one originally created by: Naupaka Zimmerman, Greg Wilson, Raniere Silva, Scott Ritchie, FranÃ§ois Michonneau, Jeffrey Oliver, â€¦ Yuka Takemon. (2019, July). swcarpentry/r-novice-gapminder: Software Carpentry: R for Reproducible Scientific Analysis, June 2019 (Version v2019.06.1). Zenodo. <http://doi.org/10.5281/zenodo.3265164>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}